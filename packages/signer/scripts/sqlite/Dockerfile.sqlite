# Stage 1: Base image with Bun
# Using the official Bun image for a lean and fast environment.
FROM oven/bun:1 AS base
WORKDIR /usr/src/app

# Stage 2: System dependencies and CLI tools
# This stage installs system dependencies and CLI tools needed for production
FROM base AS system-tools
WORKDIR /usr/src/app

# Install system dependencies and CLI tools
USER root
RUN apt-get update && apt-get install -y \
    cron \
    sqlite3 \
    gzip \
    curl \
    wget \
    unzip \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install rclone for R2 uploads
RUN curl -O https://downloads.rclone.org/rclone-current-linux-amd64.zip \
    && unzip rclone-current-linux-amd64.zip \
    && cp rclone-*-linux-amd64/rclone /usr/local/bin/ \
    && chmod +x /usr/local/bin/rclone \
    && rm -rf rclone-*

# Stage 3: Install all dependencies
# This stage is dedicated to installing dependencies for the entire monorepo.
# It leverages Docker's layer caching. This layer only gets rebuilt when
# package manager files change.
FROM base AS builder
WORKDIR /usr/src/app

# Copy workspace configuration files
COPY pnpm-workspace.yaml ./
COPY tsconfig.json ./
COPY package.json ./
COPY patches ./patches/

# Copy all package.json files from the monorepo packages
# This is crucial for pnpm to understand the workspace structure and dependencies.
COPY packages/contracts/package.json ./packages/contracts/
COPY packages/sdk/package.json ./packages/sdk/
COPY packages/signer/package.json ./packages/signer/

# Copy the lockfile
COPY pnpm-lock.yaml ./

# Copy source code for dependencies
COPY packages/contracts ./packages/contracts
COPY packages/sdk ./packages/sdk

# Install all dependencies using pnpm.
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN bun i -g pnpm
RUN pnpm install

# Copy the source code for the signer package
COPY packages/signer/ ./packages/signer/

# Copy o1js cache files. This is important for o1js to work correctly
# without needing to regenerate them on every start.
# COPY packages/signer/cache ./packages/signer/cache

# Although there is no explicit build step, we run bun install
# to ensure all necessary setup for the signer package is complete.
# We are targeting the signer package specifically.
WORKDIR /usr/src/app/packages/contracts
RUN pnpm run build

WORKDIR /usr/src/app/packages/sdk
RUN pnpm run build

# Stage 4: Production image
# This is the final image that will be deployed.
FROM system-tools AS production
WORKDIR /usr/src/app

# Copy built application and dependencies from the builder stage
COPY --from=builder --chown=bun:bun /usr/src/app/ ./

# Copy scripts and make them executable
COPY --chown=bun:bun packages/signer/scripts/backup-db.sh /usr/local/bin/backup-db.sh
COPY packages/signer/scripts/docker-entrypoint.sh /docker-entrypoint.sh

# COPY packages/signer/scripts/cron-wrapper.sh /usr/local/bin/cron-wrapper.sh 
RUN chmod +x /usr/local/bin/backup-db.sh /docker-entrypoint.sh # /usr/local/bin/cron-wrapper.sh

# Expose the port the app will run on.
EXPOSE 3001
WORKDIR /usr/src/app/packages/signer

CMD ["/docker-entrypoint.sh"]
